plugins {
	id 'java'
	id 'org.springframework.boot' version '3.2.2'
	id 'io.spring.dependency-management' version '1.1.4'
}

group = 'graphqlJavaTutorial2'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '17'
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

Properties env = new Properties()
File subPropertiesFile = new File("$projectDir/env.properties")
subPropertiesFile.withInputStream {
	env.load(it)
}

def profiles = (project.hasProperty('profiles')
		? project.property('profiles')
		: env.DEFAULT_LOCAL_SPRING_PROFILES).split(",")

dependencies {
	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-docker-compose'
	annotationProcessor 'org.projectlombok:lombok'

	//  API documentation

	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	testImplementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	testAnnotationProcessor "org.mapstruct:mapstruct-processor"
	testImplementation "io.rest-assured:spring-mock-mvc"
	testImplementation "org.hamcrest:hamcrest-all"
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.testcontainers:junit-jupiter'
	implementation "org.hibernate.orm:hibernate-jpamodelgen"
	developmentOnly 'org.springframework.boot:spring-boot-devtools'

	implementation 'org.springframework.boot:spring-boot-starter-graphql'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	testImplementation 'org.springframework:spring-webflux'
	testImplementation 'org.springframework.graphql:spring-graphql-test'

	// 	DATABASE:
	if (profiles.contains("h2")) {
		runtimeOnly 'com.h2database:h2'
	}

	if (profiles.contains("postgres")) {
		runtimeOnly 'org.postgresql:postgresql'
		testImplementation 'org.testcontainers:testcontainers'
		testImplementation "org.testcontainers:postgresql"
	}

	if (profiles.contains("liquibase")) {
		implementation 'org.liquibase:liquibase-core'
	}
}
bootRun {
	args = ["--spring.profiles.active=${profiles.join(",")}"]
}

tasks.named('test') {
	useJUnitPlatform()
	systemProperty 'spring.profiles.active', "${profiles.join(",")}"
	testLogging {
		outputs.upToDateWhen { false }
		showStandardStreams = true
	}
}
